/* Plugin generated by AMXX-Studio */

#include < amxmodx >
#include < amxmisc >
#include < cstrike >
#include < fakemeta >
#include < hamsandwich >
#include < engine >
#include < xs >
#include < fun >
#include < nvault >
#include < dhudmessage >
#include < weapons >
#include < zombieplague >

#define PLUGIN 			"[Avatar] Extra Rychlost"
#define VERSION 		"0.3"
#define AUTHOR 			"adamCSzombie"

#define NAME			"\y(Premium)\w Extra Speed"
#define COST			200

#define EXTRAVIP		ADMIN_LEVEL_F
#define TASK_POWER 		1234554321

new g_have_speed[ 33 ], g_iPrevCurWeapon[ 33 ];

new g_speed, g_MsgSync;

public plugin_init( ) 
{
	register_dictionary( "zombie_plague.txt" );
	register_plugin( PLUGIN, VERSION, AUTHOR );
	
	register_event( "CurWeapon" , "fw_EvCurWeapon" , "be" , "1=1" );
	
	g_speed = 			zp_register_extra_item( NAME, COST, ZP_TEAM_HUMAN );
	g_MsgSync = 			CreateHudSyncObj( );
	
	RegisterHam( Ham_Killed, "player", "Fwd_PlayerKilled_Pre", 0 );
	RegisterHam( Ham_Killed,"player","Hrac_Zomrel",1 );
}

public client_disconnect( id )
{ g_have_speed[ id ] = false; }

public client_putinserver( id )
{ g_have_speed[ id ] = false; }

public zp_user_infected_post( infected, infector )
{ g_have_speed[ infected ] = false; }

public zp_extra_item_selected( player, itemid )
{
	if( itemid == g_speed )
	{	
		if( get_user_flags( player ) & EXTRAVIP )
		{
			if( !zp_has_round_started( ) )
			{
				client_cmd( player, "spk valve/sound/buttons/button11" );
				client_print( player, print_chat, "%L", LANG_PLAYER, "WAIT_NEW_ROUND" );
				zp_set_user_ammo_packs( player, zp_get_user_ammo_packs( player ) + COST );
				return;
			}
			
			if( g_have_speed[ player ] )
			{
				client_cmd( player, "spk valve/sound/buttons/button11" );
				client_print( player, print_chat, "%L", LANG_PLAYER, "SPEED_HAVE" );
				zp_set_user_ammo_packs( player, zp_get_user_ammo_packs( player ) + COST );
				return;
			}
			
			set_task( 1.0, "Task_Show_Power", player + TASK_POWER, _, _, "b" );
			g_have_speed[ player ] = true;
			client_cmd( player, "spk valve/sound/fvox/activated" );
			ChatColor( player, "%L", LANG_PLAYER, "SPEED_BUY" );
			new Float:MaxSpeed = 420.0;
			set_user_maxspeed( player,Float:MaxSpeed );		
		}
		else
		{
			client_cmd( player, "spk valve/sound/buttons/button11" );
			client_print( player, print_chat, "%L", LANG_PLAYER, "ITEM_FOR_PREMIUM" );
			zp_set_user_ammo_packs( player, zp_get_user_ammo_packs( player ) + COST );
			return;
		}
	
	}		
} 

public Hrac_Zomrel( victim,attacker,shouldgibc ) {
	if( g_have_speed[ victim ] ) {
		g_have_speed[ victim ] = false;
		g_iPrevCurWeapon[ victim ] = false;
	}
}

public fw_EvCurWeapon( id )
{
	if ( is_user_bot( id ) )
		return;
	
	if( !is_user_connected( id ) )
		return;
		
	if( g_have_speed[ id ] )
	{
		new iCurWeapon = read_data( 2 );
		if( iCurWeapon != g_iPrevCurWeapon[ id ] )
		{
			set_user_maxspeed( id , 420.0 );
			g_iPrevCurWeapon[ id ] = iCurWeapon;
		}
	}
}

public Fwd_PlayerKilled_Pre( victim, attacker, shouldgib )
{
	if( task_exists( victim + TASK_POWER ) )
		remove_task( victim + TASK_POWER );	
}

public Task_Show_Power( id )
{
	id -= TASK_POWER;
	
	if( !g_have_speed[ id ] )
		remove_task( id + TASK_POWER );
	if( is_entity_moving( id ) )
	{
		set_hudmessage( 255, 127, 0, 0.12, 0.31, 0, 6.0, 1.1, 0.0, 0.0, -1 );
		ShowSyncHudMsg( id, g_MsgSync, "%L", LANG_PLAYER, "SPEED_ACTIVE" );
	}
	else
	{
		set_hudmessage( 93, 90, 93, 0.12, 0.31, 0, 6.0, 1.1, 0.0, 0.0, -1 );
		ShowSyncHudMsg( id, g_MsgSync, "%L", LANG_PLAYER, "SPEED_INACTIVE" );
	}
}

stock is_entity_moving( entity )
{
	if( !is_valid_ent( entity ) )
		return 0
	
	new Float:fVelocity[ 3 ];
	entity_get_vector( entity, EV_VEC_velocity, fVelocity );
	if( vector_length( fVelocity ) >= 150.0 )
		return 1;
	
	return 0;
} 

stock ChatColor( const id, const input[], any:... )
{
	new count = 1, players[ 32 ];
	static msg[ 191 ];
	vformat( msg, 190, input, 3 );
	
	replace_all( msg, 190, "!g", "^4" );
	replace_all( msg, 190, "!y", "^1" );
	replace_all( msg, 190, "!t", "^3" );
	
	
	if(id) players[ 0 ] = id; else get_players( players, count, "ch" )
	{
		for( new i = 0; i < count; i++ )
		{
			if( is_user_connected( players[ i ] ) )
			{
				message_begin( MSG_ONE_UNRELIABLE, get_user_msgid("SayText"), _, players[ i ] );  
				write_byte( players[ i ] );
				write_string( msg );
				message_end( );
			}
		}
	}
}

stock ScreenFade( plr, Float:fDuration, red, green, blue, alpha )
{
	new i = plr ? plr : get_maxplayers();
	if( !i )
	{
		return 0;
	}
	
	message_begin( plr ? MSG_ONE : MSG_ALL, get_user_msgid( "ScreenFade" ), {0, 0, 0}, plr );
	write_short( floatround( 4096.0 * fDuration, floatround_round ) );
	write_short( floatround( 4096.0 * fDuration, floatround_round ) );
	write_short( 4096 );
	write_byte( red );
	write_byte( green );
	write_byte( blue );
	write_byte( alpha );
	message_end( );
	
	return 1;
	
}
