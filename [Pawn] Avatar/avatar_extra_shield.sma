/* Plugin generated by AMXX-Studio */

#include < amxmodx >
#include < amxmisc >
#include < fakemeta >
#include < engine >
#include < hamsandwich >
#include < zombieplague >
#include < dhudmessage >
#include < xs >

#define PLUGIN 		"[Avatar] Shield"
#define VERSION 	"0.3"
#define AUTHOR 		"adamCSzombie"

#define ITEM_COST	40
#define	EXTRA_ITEM	"Explosion Shield"

#define is_user_valid(%1) (1 <= %1 <= maxplayers)

new g_shield[ 33 ], g_cooldown[ 33 ], i_cooldown_time[ 33 ], g_itemid, g_iHudSync, maxplayers;
new Float:anti_frost = 10.0;

public plugin_natives( )
{
	register_native( "is_user_shielded","native_is_user_antifrost",1 )
}

public plugin_init( ) 
{
	register_dictionary( "zombie_plague.txt" );
	register_plugin( PLUGIN, VERSION, AUTHOR );
	
	g_itemid 		= zp_register_extra_item( EXTRA_ITEM, ITEM_COST, ZP_TEAM_ZOMBIE );
	g_iHudSync		= CreateHudSyncObj( );
	maxplayers 		= get_maxplayers( );
	
	RegisterHam( Ham_Spawn, "player", "player_spawn",1 );
	RegisterHam( Ham_Killed, "player", "fw_PlayerKilled" );
	
}
public client_putinserver( id ) g_shield[ id ] = false;

public client_disconnect( id ) g_shield[ id ] = false;

public zp_extra_item_selected( player, itemid )
{
	if ( itemid == g_itemid )
	{
		if ( g_shield[ player ] )
		{
			client_cmd( player, "spk valve/sound/buttons/button11" );
			ChatColor( player, "%L", LANG_PLAYER, "SHIELD_HAVE" );
			return ZP_PLUGIN_HANDLED;		
		}
		
		g_shield[ player ] = true;
		i_cooldown_time[ player ] = floatround( anti_frost );		
		set_task( 1.0, "ShowHUD", player, _, _, "a",i_cooldown_time[ player ] );
		g_cooldown[ player ] = 1;
		ChatColor( player, "%L", LANG_PLAYER, "SHIELD_BUY" );
	}
	return PLUGIN_CONTINUE;
}
public player_spawn( id )
{
	if( g_shield[ id ] )
	{
		g_shield[ id ] = false;
		remove_task( id );
	}
}

public fw_PlayerKilled( victim, attacker, shouldgib )
{	
	if( g_shield[ victim ] )
	{
		g_shield[ victim ] = false;
		remove_task( victim );
	}
}

public native_is_user_antifrost( id )
{
	if ( !is_user_valid( id ) )
	{
		log_error( AMX_ERR_NATIVE, "[ZP] Invalid Player (%d)", id );
		return -1;
	}
	
	return g_shield[ id ];
} 

public ShowHUD( id )
{
	if( !zp_get_user_zombie( id ) && !is_user_alive( id ) )
		return;
	if( g_shield[ id ] )
	{
		if( i_cooldown_time[ id ] == 1 )
		{
			g_shield[ id ] = false;
			client_print( id, print_center, "%L", LANG_PLAYER, "SHIELD_END" );
		}
			
		if( i_cooldown_time[ id ] >= 0 )
		{
			i_cooldown_time[ id ] = i_cooldown_time[ id ] - 1;
			set_hudmessage( 65, 165, 65, 0.75, 0.92, 0, 1.0, 1.1, 0.0, 0.0, -1 );
			ShowSyncHudMsg( id, g_iHudSync, "^nShield: %d sec.",i_cooldown_time[ id ] );
		}
		else
		{
			client_print( id, print_center, "%L", LANG_PLAYER, "SHIELD_END" );
		}
	}
}

stock ChatColor( const id, const input[ ], any:...) 
{
	new count = 1, players[ 32 ];
	static msg[ 191 ];
	vformat( msg, 190, input, 3 );
	
	replace_all( msg, 190, "!g", "^4" );
	replace_all( msg, 190, "!y", "^1" );
	replace_all( msg, 190, "!t", "^3" );
	
	
	if(id) players[ 0 ] = id; else get_players( players, count, "ch" )
	{
		for(new i = 0; i < count; i++)
		{
			if( is_user_connected( players[ i ] ) )
			{
				message_begin( MSG_ONE_UNRELIABLE, get_user_msgid("SayText"), _, players[ i ] );
				write_byte( players[ i ] );
				write_string( msg );
				message_end( );
			}
		}
	}
}

